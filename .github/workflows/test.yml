name: CI Workflow con Docker y Métricas

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # =============================
  #  JOB 1: PRUEBAS UNITARIAS
  # =============================
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar pruebas con reporte
        run: npm test -- --reporter=junit --outputFile=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: test-results.xml
          reporter: jest-junit

  # =============================
  #  JOB 2: DOCKER BUILD
  # =============================
  docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      docker-summary: ${{ steps.docker-summary.outputs.summary }}
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Login en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.Docker_Username }}
          password: ${{ secrets.Docker_Password }}

      - name: Extraer metadatos de Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.Docker_Username }}/miapp
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Construir y subir imagen a Docker Hub
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate Docker Summary
        id: docker-summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Imagen Construida" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ secrets.Docker_Username }}/miapp" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** $(docker images ${{ secrets.Docker_Username }}/miapp --format "{{.Size}}" | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Detalles de Build" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** $(uname -m)" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed to:** Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Tags Disponibles" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            echo "- $tag" >> $GITHUB_STEP_SUMMARY
          done

      - name: Upload Docker Build Info
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-info
          path: |
            Dockerfile
            .dockerignore
          retention-days: 30

  # =============================
  #  JOB 3: GENERAR MÉTRICAS
  # =============================
  metrics:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Generate metrics
        run: |
          mkdir -p metrics
          echo "📊 Métricas del proyecto" > metrics/metrics.txt
          echo "Fecha: $(date)" >> metrics/metrics.txt
          echo "Número de dependencias: $(jq '.dependencies | length' package.json)" >> metrics/metrics.txt
          echo "Número de devDependencies: $(jq '.devDependencies | length' package.json)" >> metrics/metrics.txt
          echo "Total de archivos JS/TS: $(find . -name '*.js' -o -name '*.ts' | wc -l)" >> metrics/metrics.txt

      - name: Add test results summary to metrics
        run: |
          if [ -f test-results.xml ]; then
            passed=$(grep -o 'tests="[^"]*"' test-results.xml | head -1 | sed 's/[^0-9]//g')
            failures=$(grep -o 'failures="[^"]*"' test-results.xml | head -1 | sed 's/[^0-9]//g')
            skipped=$(grep -o 'skipped="[^"]*"' test-results.xml | head -1 | sed 's/[^0-9]//g')
            echo "✅ Pruebas ejecutadas: $passed" >> metrics/metrics.txt
            echo "❌ Pruebas fallidas: $failures" >> metrics/metrics.txt
            echo "⏭️ Pruebas omitidas: $skipped" >> metrics/metrics.txt
          else
            echo "⚠️ No se encontró test-results.xml" >> metrics/metrics.txt
          fi

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-metrics
          path: metrics/

  # =============================
  #  JOB 4: RESUMEN FINAL
  # =============================
  summary:
    runs-on: ubuntu-latest
    needs: [test, docker, metrics]
    steps:
      - name: Generate Final Summary
        run: |
          echo "# 📊 Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Tests ejecutados y validados" >> $GITHUB_STEP_SUMMARY
          echo "- Resultados disponibles como artefacto" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Docker Build" >> $GITHUB_STEP_SUMMARY
          echo "- Imagen construida y publicada en Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Métricas del Proyecto" >> $GITHUB_STEP_SUMMARY
          echo "- Artefacto generado con estadísticas del proyecto" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 Execution Time" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow completado en: $(date -u)" >> $GITHUB_STEP_SUMMARY
