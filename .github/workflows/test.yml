name: pruebas en Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar pruebas con reporte
        run: npm test -- --reporter=junit --outputFile=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: test-results.xml
          reporter: jest-junit

      # -----------------------------
      # 📈 Cobertura de Pruebas (Métricas)
      # -----------------------------
      - name: Ejecutar métricas de cobertura
        run: npm run coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 30

      - name: Mostrar % cobertura en summary
        run: |
          COVERAGE=$(npx coverage-percentage ./coverage/lcov.info total lines)
          echo "## 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "- Cobertura total de líneas: **$COVERAGE%**" >> $GITHUB_STEP_SUMMARY
          echo "- Reporte HTML disponible en artifacts (coverage-report)" >> $GITHUB_STEP_SUMMARY

  docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      docker-summary: ${{ steps.docker-summary.outputs.summary }}
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Login en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.Docker_Username }}
          password: ${{ secrets.Docker_Password }}

      - name: Extraer metadatos de Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.Docker_Username }}/miapp
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Construir y subir imagen a Docker Hub
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate Docker Summary
        id: docker-summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Imagen Construida" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ secrets.Docker_Username }}/miapp" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** $(docker images ${{ secrets.Docker_Username }}/miapp --format "{{.Size}}" | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Detalles de Build" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** $(uname -m)" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed to:** Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Tags Disponibles" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          done

      - name: Upload Docker Build Info
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-info
          path: |
            Dockerfile
            .dockerignore
          retention-days: 30

  summary:
    runs-on: ubuntu-latest
    needs: [test, docker]
    steps:
      - name: Generate Final Summary
        run: |
          echo "# 📊 Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Tests ejecutados y resultados subidos" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Revisar coverage-report en artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Docker Build" >> $GITHUB_STEP_SUMMARY
          echo "- Imagen construida y publicada en Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 Execution Time" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow completado en: $(date -u)" >> $GITHUB_STEP_SUMMARY
